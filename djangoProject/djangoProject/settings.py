"""
Django settings for djangoProject project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

# .venv\Scripts\activate
# python manage.py makemigrations

from pathlib import Path
import os
import djongo

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-q_&_0$%e0@-oq%l5+kks6gqq_l)lyj+=64xv%_yjn2fx)(*n1#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
]

# Middleware，即中间件，是一种独立的系统软件或服务程序
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djangoProject.urls'
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 指定模板文件夹的路径
        'APP_DIRS': True,  # 是否在每个应用目录下查找templates文件夹
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoProject.wsgi.application'
# 在Django中，WSGI_APPLICATION是一个重要的变量，它用于指定处理HTTP请求的WSGI应用程序。当Web服务器收到HTTP请求时，它会使用WSGI_APPLICATION变量中指定的应用程序来处理这个请求。
# WSGI_APPLICATION变量的值应该是一个字符串，它指定了Python可导入的路径。通常，这个路径指向一个包含名为application的可调用对象的模块。这个可调用对象就是Web服务器用来处理HTTP请求的实际逻辑。
# 具体来说，WSGI_APPLICATION在Django的设置文件（settings.py）中进行配置。默认情况下，Django会在这个文件中包含一个名为WSGI_APPLICATION的注释行。开发者只需要取消这个注释，并将其设置为自己的WSGI应用程序的路径即可。
# 在实际使用中，WSGI Application是网关接口的实际执行逻辑层。对于Server来说，它提供了一个可以传入两个参数（environ和start_response）的接口。在接口逻辑中，通常会根据environ里的数据处理逻辑，改变application中对应功能的状态，然后调用start_response返回头信息，并在返回值中返回响应体。
# 需要注意的是，虽然WSGI_APPLICATION主要用于处理同步请求，但在处理异步请求（如Websockets、长轮询等）时，Django也提供了ASGI_APPLICATION作为替代方案。ASGI_APPLICATION是用于ASGI服务器的入口点，而WSGI_APPLICATION则是用于WSGI服务器的入口点。如果你使用的是异步服务器，那么应该使用ASGI_APPLICATION，否则使用WSGI_APPLICATION。
# 总的来说，WSGI_APPLICATION在Django中扮演着至关重要的角色，它确保了Web服务器能够正确地找到并调用处理HTTP请求的应用程序。


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'NAME': 'local',  # MongoDB数据库名
        'CLIENT': {
            'host': '127.0.0.1',  # MongoDB服务器地址
            'port': 27017,  # MongoDB端口
            # 'host': 'mongodb://localhost:27017/',  # MongoDB服务器地址
            # 'port': 27017,  # MongoDB端口
            # 'username': 'your_username',  # 如果有用户名的话
            # 'password': 'your_password',  # 如果有密码的话
            'authSource': 'local',  # 认证来源数据库，如果没有用户凭证，通常设置为数据库名
            # 'authMechanism': 'SCRAM-SHA-1',  # 认证机制
        }
    }

    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }

}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

# 用于定义一组密码验证器，这些验证器会在用户设置或更改密码时被调用，以确保密码符合一定的安全标准
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Using pymongo 3.12.1 will solve your problem,I have faced this problem one hours ago
